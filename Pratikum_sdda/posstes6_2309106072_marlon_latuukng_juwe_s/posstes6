
#include <iostream>

using namespace std;

struct toko_alat_konstruksi {
    int id_barang;
    char nama_produk[50];
    double harga;
    toko_alat_konstruksi* next;
};

struct keranjang_belanja {
    int id_barang;
    char nama_produk[50];
    double harga;
    keranjang_belanja* next;
};

struct Stack {
    keranjang_belanja* top;
};

struct Queue {
    keranjang_belanja* front;
    keranjang_belanja* rear;
};

toko_alat_konstruksi* head = nullptr;
Stack keranjangStack = { nullptr };
Queue keranjangQueue = { nullptr, nullptr };

// Manual string copy function
void stringCopy(char* dest, const char* src) {
    int i = 0;
    while (src[i] != '\0' && i < 49) {
        dest[i] = src[i];
        i++;
    }
    dest[i] = '\0';
}

// Manual string compare function
bool stringCompare(const char* str1, const char* str2) {
    int i = 0;
    while (str1[i] != '\0' && str2[i] != '\0') {
        if (str1[i] != str2[i]) {
            return false;
        }
        i++;
    }
    return (str1[i] == '\0' && str2[i] == '\0');
}

void tambahProduk(int id_barang, const char* nama_produk, double harga) {
    toko_alat_konstruksi* produkBaru = new toko_alat_konstruksi();
    produkBaru->id_barang = id_barang;

    // Copy nama_produk without using cstring
    stringCopy(produkBaru->nama_produk, nama_produk);
    
    produkBaru->harga = harga;
    produkBaru->next = nullptr;

    if (head == nullptr) {
        head = produkBaru;
    } else {
        toko_alat_konstruksi* temp = head;
        while (temp->next != nullptr) {
            temp = temp->next;
        }
        temp->next = produkBaru;
    }
}

void displayProduk() {
    cout << "========== Daftar Produk ==========" << endl;
    toko_alat_konstruksi* temp = head;
    while (temp != nullptr) {
        cout << "ID: " << temp->id_barang << " | Produk: " << temp->nama_produk << " | Harga: $" << temp->harga << endl;
        temp = temp->next;
    }
    cout << "===================================" << endl;
}

// Fibonacci Search
int min(int x, int y) { return (x <= y) ? x : y; }

int fibonacciSearch(int id_cari) {
    toko_alat_konstruksi* temp = head;
    int n = 0;
    
    while (temp != nullptr) {
        n++;
        temp = temp->next;
    }

    int fib2 = 0;
    int fib1 = 1;
    int fib = fib2 + fib1;

    while (fib < n) {
        fib2 = fib1;
        fib1 = fib;
        fib = fib2 + fib1;
    }

    int offset = -1;
    temp = head;
    toko_alat_konstruksi* current = head;

    while (fib > 1) {
        int i = min(offset + fib2, n - 1);
        current = head;
        for (int j = 0; j < i; ++j) current = current->next;

        if (current->id_barang < id_cari) {
            fib = fib1;
            fib1 = fib2;
            fib2 = fib - fib1;
            offset = i;
        } else if (current->id_barang > id_cari) {
            fib = fib2;
            fib1 = fib1 - fib2;
            fib2 = fib - fib1;
        } else {
            return i; // id_barang found
        }
    }

    if (fib1 && current->id_barang == id_cari) return offset + 1;
    return -1;
}

// Jump Search
int customSqrt(int num) {
    int res = 1;
    while (res * res <= num) {
        res++;
    }
    return res - 1;
}

int jumpSearch(int id_cari) {
    int n = 0;
    toko_alat_konstruksi* temp = head;
    while (temp != nullptr) {
        n++;
        temp = temp->next;
    }

    int step = customSqrt(n);
    int prev = 0;
    temp = head;

    toko_alat_konstruksi* current = head;
    for (int i = 0; i < step && current != nullptr; ++i) {
        current = current->next;
    }

    while (current != nullptr && current->id_barang < id_cari) {
        prev += step;
        temp = current;
        for (int i = 0; i < step && current != nullptr; ++i) {
            current = current->next;
        }
    }

    for (int i = prev; i < min(prev + step, n); ++i) {
        if (temp->id_barang == id_cari) return i;
        temp = temp->next;
    }

    return -1;
}

// Boyer-Moore Search
int stringLength(const char* str) {
    int length = 0;
    while (str[length] != '\0') {
        length++;
    }
    return length;
}

int boyerMooreSearch(const char* text, const char* pattern) {
    int m = stringLength(pattern);
    int n = stringLength(text);

    int badChar[256];
    for (int i = 0; i < 256; i++) badChar[i] = -1;
    for (int i = 0; i < m; i++) badChar[(int)pattern[i]] = i;

    int s = 0;
    while (s <= (n - m)) {
        int j = m - 1;

        while (j >= 0 && pattern[j] == text[s + j])
            j--;

        if (j < 0) {
            return s;
        } else {
            s += max(1, j - badChar[text[s + j]]);
        }
    }
    return -1;
}

// Search Product by ID
void searchProductById(int method, int id_barang) {
    int result = -1;
    switch (method) {
        case 1:
            result = fibonacciSearch(id_barang);
            break;
        case 2:
            result = jumpSearch(id_barang);
            break;
        default:
            cout << "Metode pencarian tidak valid." << endl;
            return;
    }

    if (result != -1)
        cout << "Produk dengan ID " << id_barang << " ditemukan." << endl;
    else
        cout << "Produk tidak ditemukan." << endl;
}

// Search Product by Name using Boyer-Moore
void searchProductByName(const char* pattern) {
    toko_alat_konstruksi* temp = head;
    bool found = false;
    while (temp != nullptr) {
        int pos = boyerMooreSearch(temp->nama_produk, pattern);
        if (pos != -1) {
            cout << "Produk ditemukan: " << temp->nama_produk << endl;
            found = true;
        }
        temp = temp->next;
    }

    if (!found) cout << "Produk dengan nama tersebut tidak ditemukan." << endl;
}

void shopping() {
    cout << "Belanja belum diimplementasikan!" << endl;
}

int main() {
    tambahProduk(1, "Excavator", 25000.0);
    tambahProduk(2, "Crane", 35000.0);
    tambahProduk(3, "Hard Hats", 150.0);
    tambahProduk(4, "Reflective Vest", 100.0);
    tambahProduk(5, "Safety Boots", 100.0);
    displayProduk();
    shopping();

    int searchOption;
    cout << "\nPilih metode pencarian:\n1. Fibonacci Search\n2. Jump Search\n";
    cout << "Masukkan pilihan: ";
    cin >> searchOption;

    int id_barang;
    cout << "Masukkan ID barang yang ingin dicari: ";
    cin >> id_barang;
    searchProductById(searchOption, id_barang);

    char pattern[50];
    cout << "Masukkan nama produk yang ingin dicari: ";
    cin >> pattern;
    searchProductByName(pattern);

    return 0;
}